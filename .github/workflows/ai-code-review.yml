name: Batch AI Code Review

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: string

jobs:
  ai-code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get PR files and checkout branch
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get PR details and checkout the branch
        PR_DATA=$(gh pr view ${{ inputs.pr_number }} --json headRefName,files)
        HEAD_BRANCH=$(echo "$PR_DATA" | jq -r '.headRefName')
        
        git fetch origin $HEAD_BRANCH
        git checkout $HEAD_BRANCH
        
        # Get list of changed files
        FILES=$(echo "$PR_DATA" | jq -r '.files[].path' | tr '\n' ' ')
        echo "Changed files: $FILES"
        echo "CHANGED_FILES=$FILES" >> $GITHUB_ENV

    - name: Review with Claude
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pip install anthropic PyGithub
        
        python << 'EOF'
        import os
        import anthropic
        from github import Github
        
        # Setup
        client = anthropic.Anthropic(api_key=os.environ['ANTHROPIC_API_KEY'])
        github_client = Github(os.environ['GITHUB_TOKEN'])
        repo = github_client.get_repo(os.environ['GITHUB_REPOSITORY'])
        pr = repo.get_pull(${{ inputs.pr_number }})
        
        # Get all changed files
        changed_files = os.environ['CHANGED_FILES'].split()
        print(f"Reviewing {len(changed_files)} files: {changed_files}")
        
        # Build one big prompt with all files
        prompt = """Please review all these code files together for:
        1. Code quality and best practices
        2. Potential bugs or security issues
        3. Performance improvements
        4. Code style and maintainability
        5. How the files work together
        
        Provide specific, actionable feedback for each file. If a file looks good, just say "LGTM" for that file.
        
        """
        
        # Add each file to the prompt
        for file_path in changed_files:
            if not file_path.strip():
                continue
                
            try:
                # Skip binary files
                if file_path.endswith(('.png', '.jpg', '.jpeg', '.gif', '.pdf', '.zip')):
                    print(f"Skipping binary file: {file_path}")
                    continue
                
                if os.path.exists(file_path):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Get diff
                    diff = ""
                    for file in pr.get_files():
                        if file.filename == file_path:
                            diff = file.patch or ""
                            break
                    
                    prompt += f"""
        ## {file_path}
        
        **Changes:**
        {diff}
        
        **Full file:**
        {content}
        
        ---
        """
                    
            except Exception as e:
                print(f"Error reading {file_path}: {e}")
        
        print("Sending to Claude...")
        
        # Send to Claude
        try:
            response = client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=4000,
                messages=[{"role": "user", "content": prompt}]
            )
            
            review = response.content[0].text
            print("Got review from Claude")
            
            # Post comment to PR
            comment_body = f"""## 🤖 AI Code Review
        
        {review}
        
        *This review was generated by Claude. Please verify suggestions before implementing.*"""
            
            # Update existing comment or create new one
            existing_comment = None
            for comment in pr.get_issue_comments():
                if "🤖 AI Code Review" in comment.body:
                    existing_comment = comment
                    break
            
            if existing_comment:
                existing_comment.edit(comment_body)
                print("✅ Updated existing comment")
            else:
                pr.create_issue_comment(comment_body)
                print("✅ Posted new comment")
                
        except Exception as e:
            print(f"❌ Error: {e}")
        
        EOF
