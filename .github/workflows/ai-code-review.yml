name: AI Code Review

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review (leave empty for current branch)'
        required: false
        type: string

jobs:
  ai-code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get PR context
      id: pr-context
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ -n "${{ inputs.pr_number }}" ]; then
          echo "pr_number=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
          echo "Manual review requested for PR #${{ inputs.pr_number }}"
          
          # Get PR details
          PR_DATA=$(gh pr view ${{ inputs.pr_number }} --json headRefName,baseRefName,headRefOid,baseRefOid)
          HEAD_BRANCH=$(echo "$PR_DATA" | jq -r '.headRefName')
          BASE_BRANCH=$(echo "$PR_DATA" | jq -r '.baseRefName')
          HEAD_SHA=$(echo "$PR_DATA" | jq -r '.headRefOid')
          BASE_SHA=$(echo "$PR_DATA" | jq -r '.baseRefOid')
          
          echo "head_branch=$HEAD_BRANCH" >> $GITHUB_OUTPUT
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
          echo "head_sha=$HEAD_SHA" >> $GITHUB_OUTPUT
          echo "base_sha=$BASE_SHA" >> $GITHUB_OUTPUT
          
          echo "PR #${{ inputs.pr_number }}: $HEAD_BRANCH ($HEAD_SHA) -> $BASE_BRANCH ($BASE_SHA)"
        else
          echo "pr_number=" >> $GITHUB_OUTPUT
          echo "Manual review requested for current branch"
        fi

    - name: Checkout PR branch
      if: steps.pr-context.outputs.pr_number != ''
      run: |
        git fetch origin ${{ steps.pr-context.outputs.base_branch }}
        git fetch origin ${{ steps.pr-context.outputs.head_branch }}
        git checkout ${{ steps.pr-context.outputs.head_branch }}
        echo "Checked out PR branch: ${{ steps.pr-context.outputs.head_branch }}"
        echo "Will compare against base branch: ${{ steps.pr-context.outputs.base_branch }}"

    - name: Get changed files
      if: steps.pr-context.outputs.pr_number != ''
      id: changed-files
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get changed files directly from PR API
        FILES=$(gh pr view ${{ inputs.pr_number }} --json files --jq '.files[].path' | tr '\n' ' ')
        echo "all_changed_files=$FILES" >> $GITHUB_OUTPUT
        echo "any_changed=true" >> $GITHUB_OUTPUT
        echo "Changed files in PR: $FILES"

    - name: Get changed files (branch mode)
      if: steps.pr-context.outputs.pr_number == ''
      id: changed-files-branch
      uses: tj-actions/changed-files@v40

    - name: Review code with Claude
      if: (steps.changed-files.outputs.any_changed == 'true') || (steps.changed-files-branch.outputs.any_changed == 'true')
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Install dependencies
        pip install anthropic PyGithub

        # Set PR number for the Python script
        echo "PR_NUMBER=${{ steps.pr-context.outputs.pr_number }}" >> $GITHUB_ENV
        
        # Set changed files and debug
        if [ -n "${{ steps.pr-context.outputs.pr_number }}" ]; then
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          echo "DEBUG: PR mode, changed files: $CHANGED_FILES"
        else
          CHANGED_FILES="${{ steps.changed-files-branch.outputs.all_changed_files }}"
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          echo "DEBUG: Branch mode, changed files: $CHANGED_FILES"
        fi
        
        echo "DEBUG: Environment variable set to: $CHANGED_FILES"
        
        # Create review script
        cat > review_code.py << 'EOF'
        import os
        import anthropic
        from github import Github
        
        # Initialize clients
        client = anthropic.Anthropic(api_key=os.environ['ANTHROPIC_API_KEY'])
        github_client = Github(os.environ['GITHUB_TOKEN'])
        
        # Get PR context
        repo_name = os.environ['GITHUB_REPOSITORY']
        repo = github_client.get_repo(repo_name)
        
        # Handle manual dispatch
        pr_number = os.environ.get('PR_NUMBER')
        changed_files_str = os.environ.get('CHANGED_FILES', '')
        
        print(f"DEBUG: PR_NUMBER = {pr_number}")
        print(f"DEBUG: CHANGED_FILES = '{changed_files_str}'")
        
        if pr_number:
            pr_number = int(pr_number)
            pr = repo.get_pull(pr_number)
            print(f"Manual review for PR #{pr_number}")
            
            # Get changed files from environment variable
            changed_files = [f.strip() for f in changed_files_str.split() if f.strip()]
            print(f"Found {len(changed_files)} changed files in PR: {changed_files}")
        else:
            # No PR specified, use the changed files from git diff
            pr = None
            changed_files = [f.strip() for f in changed_files_str.split() if f.strip()]
            print("Manual review for current branch")
            print(f"Found {len(changed_files)} changed files: {changed_files}")
        
        review_comments = []
        
        for file_path in changed_files:
            # Skip if file path is empty
            if not file_path or file_path.strip() == "":
                continue
            
            # Skip binary files and very large files
            if file_path.endswith(('.png', '.jpg', '.jpeg', '.gif', '.pdf', '.zip', '.tar', '.gz', '.exe', '.dll', '.so', '.dylib')):
                print(f"Skipping binary file: {file_path}")
                continue
                
            if os.path.exists(file_path):
                try:
                    # Check file size (skip files over 50KB to avoid token limits)
                    if os.path.getsize(file_path) > 50000:
                        print(f"Skipping large file: {file_path}")
                        continue
                    
                    with open(file_path, 'r', encoding='utf-8') as f:
                        file_content = f.read()
                except UnicodeDecodeError:
                    print(f"Skipping binary file (unicode error): {file_path}")
                    continue
                except Exception as e:
                    print(f"Error reading {file_path}: {e}")
                    continue
                
                # Get file diff for context
                try:
                    file_diff = ""
                    if pr:
                        for file in pr.get_files():
                            if file.filename == file_path:
                                file_diff = file.patch or ""
                                break
                except:
                    file_diff = ""
                
                # Review with Claude
                prompt = f"""
                Please review this code file for:
                1. Code quality and best practices
                2. Potential bugs or security issues
                3. Performance improvements
                4. Code style and maintainability
                
                File: {file_path}
                
                Diff:
                {file_diff}
                
                Full file content:
                {file_content}
                
                Please provide specific, actionable feedback. If the code looks good, just say "LGTM" (Looks Good To Me).
                Focus on the most important issues only.
                """
                
                try:
                    response = client.messages.create(
                        model="claude-3-5-sonnet-20241022",
                        max_tokens=1000,
                        messages=[{"role": "user", "content": prompt}]
                    )
                    
                    review_content = response.content[0].text
                    
                    if "LGTM" not in review_content:
                        review_comments.append(f"## ðŸ¤– AI Review: {file_path}\n\n{review_content}")
                        
                except Exception as e:
                    print(f"Error reviewing {file_path}: {e}")
            else:
                print(f"File not found: {file_path}")
        
        # Post review as PR comment or commit comment
        if review_comments:
            comment_body = "## ðŸ¤– AI Code Review\n\n" + "\n\n---\n\n".join(review_comments)
            comment_body += "\n\n*This review was generated by Claude. Please verify suggestions before implementing.*"
            
            if pr:
                # Post to PR
                existing_comment = None
                for comment in pr.get_issue_comments():
                    if comment.user.login == "github-actions[bot]" and "ðŸ¤– AI Code Review" in comment.body:
                        existing_comment = comment
                        break
                
                if existing_comment:
                    existing_comment.edit(comment_body)
                else:
                    pr.create_issue_comment(comment_body)
            else:
                # Post to commit (for manual reviews without PR)
                commit_sha = os.environ['GITHUB_SHA']
                commit = repo.get_commit(commit_sha)
                commit.create_comment(comment_body)
        else:
            print("No significant issues found in the code review.")
        
        EOF
        
        # Run the review
        python review_code.py

    - name: Summary
      if: always()
      run: |
        echo "Manual AI code review completed"
