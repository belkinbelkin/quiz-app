name: AI Code Review (Batched)

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review (leave empty for current branch)'
        required: false
        type: string
      batch_size:
        description: 'Number of files to review per batch (default: 5)'
        required: false
        type: string
        default: '5'

jobs:
  ai-code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get PR context
      id: pr-context
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ -n "${{ inputs.pr_number }}" ]; then
          echo "pr_number=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
          echo "Manual review requested for PR #${{ inputs.pr_number }}"
          
          # Get PR details
          PR_DATA=$(gh pr view ${{ inputs.pr_number }} --json headRefName,baseRefName,headRefOid,baseRefOid)
          HEAD_BRANCH=$(echo "$PR_DATA" | jq -r '.headRefName')
          BASE_BRANCH=$(echo "$PR_DATA" | jq -r '.baseRefName')
          HEAD_SHA=$(echo "$PR_DATA" | jq -r '.headRefOid')
          BASE_SHA=$(echo "$PR_DATA" | jq -r '.baseRefOid')
          
          echo "head_branch=$HEAD_BRANCH" >> $GITHUB_OUTPUT
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
          echo "head_sha=$HEAD_SHA" >> $GITHUB_OUTPUT
          echo "base_sha=$BASE_SHA" >> $GITHUB_OUTPUT
          
          echo "PR #${{ inputs.pr_number }}: $HEAD_BRANCH ($HEAD_SHA) -> $BASE_BRANCH ($BASE_SHA)"
        else
          echo "pr_number=" >> $GITHUB_OUTPUT
          echo "Manual review requested for current branch"
        fi

    - name: Checkout PR branch
      if: steps.pr-context.outputs.pr_number != ''
      run: |
        git fetch origin ${{ steps.pr-context.outputs.base_branch }}
        git fetch origin ${{ steps.pr-context.outputs.head_branch }}
        git checkout ${{ steps.pr-context.outputs.head_branch }}
        echo "Checked out PR branch: ${{ steps.pr-context.outputs.head_branch }}"
        echo "Will compare against base branch: ${{ steps.pr-context.outputs.base_branch }}"

    - name: Get changed files
      if: steps.pr-context.outputs.pr_number != ''
      id: changed-files
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get changed files directly from PR API
        FILES=$(gh pr view ${{ inputs.pr_number }} --json files --jq '.files[].path' | tr '\n' ' ')
        echo "all_changed_files=$FILES" >> $GITHUB_OUTPUT
        echo "any_changed=true" >> $GITHUB_OUTPUT
        echo "Changed files in PR: $FILES"

    - name: Get changed files (branch mode)
      if: steps.pr-context.outputs.pr_number == ''
      id: changed-files-branch
      uses: tj-actions/changed-files@v40

    - name: Review code with Claude (Batched)
      if: (steps.changed-files.outputs.any_changed == 'true') || (steps.changed-files-branch.outputs.any_changed == 'true')
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Install dependencies
        pip install anthropic PyGithub

        # Set environment variables for Python script
        export PR_NUMBER="${{ steps.pr-context.outputs.pr_number }}"
        export BATCH_SIZE="${{ inputs.batch_size }}"
        if [ -n "${{ steps.pr-context.outputs.pr_number }}" ]; then
          export CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          echo "DEBUG: PR mode, changed files: $CHANGED_FILES"
        else
          export CHANGED_FILES="${{ steps.changed-files-branch.outputs.all_changed_files }}"
          echo "DEBUG: Branch mode, changed files: $CHANGED_FILES"
        fi
        
        echo "DEBUG: Batch size: $BATCH_SIZE"
        
        # Create batched review script
        cat > review_code.py << EOF
        import os
        import math
        import anthropic
        from github import Github
        
        # Initialize clients
        client = anthropic.Anthropic(api_key=os.environ['ANTHROPIC_API_KEY'])
        github_client = Github(os.environ['GITHUB_TOKEN'])
        
        # Get configuration
        repo_name = os.environ['GITHUB_REPOSITORY']
        repo = github_client.get_repo(repo_name)
        batch_size = int(os.environ.get('BATCH_SIZE', '5'))
        
        # Handle manual dispatch
        pr_number = "${{ steps.pr-context.outputs.pr_number }}"
        if pr_number:
            changed_files_str = "${{ steps.changed-files.outputs.all_changed_files }}"
        else:
            changed_files_str = "${{ steps.changed-files-branch.outputs.all_changed_files }}"
        
        print(f"DEBUG: PR_NUMBER = '{pr_number}'")
        print(f"DEBUG: CHANGED_FILES = '{changed_files_str}'")
        print(f"DEBUG: BATCH_SIZE = {batch_size}")
        
        if pr_number:
            pr_number = int(pr_number)
            pr = repo.get_pull(pr_number)
            print(f"Manual review for PR #{pr_number}")
        else:
            pr = None
            print("Manual review for current branch")
        
        # Get changed files and filter them
        all_changed_files = [f.strip() for f in changed_files_str.split() if f.strip()]
        print(f"Found {len(all_changed_files)} total changed files")
        
        # Filter files (skip binary, large files, etc.)
        reviewable_files = []
        for file_path in all_changed_files:
            if not file_path:
                continue
            
            # Skip binary files
            if file_path.endswith(('.png', '.jpg', '.jpeg', '.gif', '.pdf', '.zip', '.tar', '.gz', '.exe', '.dll', '.so', '.dylib')):
                print(f"Skipping binary file: {file_path}")
                continue
            
            if not os.path.exists(file_path):
                print(f"File not found: {file_path}")
                continue
            
            try:
                # Check file size
                if os.path.getsize(file_path) > 50000:
                    print(f"Skipping large file: {file_path}")
                    continue
                
                # Test if file is readable
                with open(file_path, 'r', encoding='utf-8') as f:
                    f.read(100)  # Just test first 100 chars
                
                reviewable_files.append(file_path)
                
            except UnicodeDecodeError:
                print(f"Skipping binary file (unicode error): {file_path}")
                continue
            except Exception as e:
                print(f"Error checking {file_path}: {e}")
                continue
        
        print(f"Reviewable files: {reviewable_files}")
        
        # Split files into batches
        batches = []
        for i in range(0, len(reviewable_files), batch_size):
            batch = reviewable_files[i:i + batch_size]
            batches.append(batch)
        
        print(f"Created {len(batches)} batches of up to {batch_size} files each")
        
        all_review_comments = []
        
        # Process each batch
        for batch_num, batch_files in enumerate(batches, 1):
            print(f"\n=== Processing Batch {batch_num}/{len(batches)} ===")
            print(f"Files in batch: {batch_files}")
            
            # Prepare batch content
            batch_content = []
            total_tokens_estimate = 0
            
            for file_path in batch_files:
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        file_content = f.read()
                    
                    # Get file diff for context
                    file_diff = ""
                    if pr:
                        try:
                            for file in pr.get_files():
                                if file.filename == file_path:
                                    file_diff = file.patch or ""
                                    break
                        except:
                            pass
                    
                    # Estimate tokens (rough: 1 token ≈ 4 characters)
                    file_tokens = len(file_content) // 4 + len(file_diff) // 4
                    total_tokens_estimate += file_tokens
                    
                    # Add to batch
                    batch_content.append({
                        'path': file_path,
                        'content': file_content,
                        'diff': file_diff,
                        'tokens': file_tokens
                    })
                    
                except Exception as e:
                    print(f"Error reading {file_path}: {e}")
                    continue
            
            print(f"Batch {batch_num} token estimate: ~{total_tokens_estimate:,} tokens")
            
            # Skip if batch is too large (>180k tokens ≈ 45k chars per file avg)
            if total_tokens_estimate > 180000:
                print(f"Skipping batch {batch_num} - too large ({total_tokens_estimate:,} tokens)")
                continue
            
            # Create batch prompt
            batch_prompt = f"""Please review these {len(batch_content)} code files as a batch for:
        1. Code quality and best practices
        2. Potential bugs or security issues  
        3. Performance improvements
        4. Code style and maintainability
        5. Relationships and consistency between files
        
        For each file, provide specific feedback. If a file looks good, just say "LGTM" for that file.
        Focus on the most important issues and how files work together.
        
        """
                    
                    # Add each file to the prompt
                    for file_info in batch_content:
                        batch_prompt += f"""
        ## File: {file_info['path']}
        
        ### Diff:
        {file_info['diff']}
        
        ### Full Content:
        {file_info['content']}
        
        ---
        """
            
            try:
                print(f"Sending batch {batch_num} to Claude...")
                response = client.messages.create(
                    model="claude-3-5-sonnet-20241022",
                    max_tokens=3000,  # Increased for batch responses
                    messages=[{"role": "user", "content": batch_prompt}]
                )
                
                review_content = response.content[0].text
                print(f"Received response for batch {batch_num}")
                
                # Only add to comments if there are actual issues (not just LGTM)
                if not all(keyword in review_content.upper() for keyword in ['LGTM'] * len(batch_files)):
                    all_review_comments.append(f"## 🤖 AI Review: Batch {batch_num} ({', '.join(batch_files)})\n\n{review_content}")
                
            except Exception as e:
                print(f"Error reviewing batch {batch_num}: {e}")
                continue
        
        # Post review comments
        print(f"DEBUG: Found {len(all_review_comments)} review comments to post")
        
        if all_review_comments:
            comment_body = "## 🤖 AI Code Review (Batched)\n\n" + "\n\n---\n\n".join(all_review_comments)
            comment_body += f"\n\n*This review was generated by Claude in {len(batches)} batches. Please verify suggestions before implementing.*"
            
            print(f"DEBUG: Comment body length: {len(comment_body)} characters")
            print(f"DEBUG: PR object exists: {pr is not None}")
            
            if pr:
                print(f"DEBUG: PR #{pr.number} - {pr.title}")
                
                # Post to PR
                existing_comment = None
                try:
                    comments = list(pr.get_issue_comments())
                    print(f"DEBUG: Found {len(comments)} existing comments")
                    
                    for comment in comments:
                        print(f"DEBUG: Comment by {comment.user.login}: {comment.body[:50]}...")
                        if comment.user.login == "github-actions[bot]" and "🤖 AI Code Review" in comment.body:
                            existing_comment = comment
                            print("DEBUG: Found existing AI review comment")
                            break
                except Exception as e:
                    print(f"DEBUG: Error getting existing comments: {e}")
                
                try:
                    if existing_comment:
                        existing_comment.edit(comment_body)
                        print("✅ Updated existing PR comment")
                    else:
                        new_comment = pr.create_issue_comment(comment_body)
                        print(f"✅ Created new PR comment: {new_comment.html_url}")
                except Exception as e:
                    print(f"❌ Error posting PR comment: {e}")
                    print(f"DEBUG: PR permissions - can comment: {pr.get_issue_comments is not None}")
            else:
                # Post to commit
                try:
                    commit_sha = os.environ['GITHUB_SHA']
                    commit = repo.get_commit(commit_sha)
                    new_comment = commit.create_comment(comment_body)
                    print(f"✅ Posted comment to commit: {new_comment.html_url}")
                except Exception as e:
                    print(f"❌ Error posting commit comment: {e}")
        else:
            print("No significant issues found in any batch - no comment posted")
        
        print(f"\nBatched review completed: {len(batches)} batches, {len(reviewable_files)} files total")
        
        EOF
        
        # Run the batched review
        python review_code.py

    - name: Summary
      if: always()
      run: |
        echo "Batched AI code review completed"
